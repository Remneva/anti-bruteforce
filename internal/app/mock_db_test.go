// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	storage "github.com/Remneva/anti-bruteforce/internal/storage"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockBaseStorage is a mock of BaseStorage interface
type MockBaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBaseStorageMockRecorder
}

// MockBaseStorageMockRecorder is the mock recorder for MockBaseStorage
type MockBaseStorageMockRecorder struct {
	mock *MockBaseStorage
}

// NewMockBaseStorage creates a new mock instance
func NewMockBaseStorage(ctrl *gomock.Controller) *MockBaseStorage {
	mock := &MockBaseStorage{ctrl: ctrl}
	mock.recorder = &MockBaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseStorage) EXPECT() *MockBaseStorageMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockBaseStorage) Connect(ctx context.Context, dsn string, l *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, dsn, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockBaseStorageMockRecorder) Connect(ctx, dsn, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBaseStorage)(nil).Connect), ctx, dsn, l)
}

// Close mocks base method
func (m *MockBaseStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockBaseStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBaseStorage)(nil).Close))
}

// Configs mocks base method
func (m *MockBaseStorage) Configs() storage.ConfigurationStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configs")
	ret0, _ := ret[0].(storage.ConfigurationStorage)
	return ret0
}

// Configs indicates an expected call of Configs
func (mr *MockBaseStorageMockRecorder) Configs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configs", reflect.TypeOf((*MockBaseStorage)(nil).Configs))
}

// Lists mocks base method
func (m *MockBaseStorage) Lists() storage.ListStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lists")
	ret0, _ := ret[0].(storage.ListStorage)
	return ret0
}

// Lists indicates an expected call of Lists
func (mr *MockBaseStorageMockRecorder) Lists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lists", reflect.TypeOf((*MockBaseStorage)(nil).Lists))
}

// MockConfigurationStorage is a mock of ConfigurationStorage interface
type MockConfigurationStorage struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationStorageMockRecorder
}

// MockConfigurationStorageMockRecorder is the mock recorder for MockConfigurationStorage
type MockConfigurationStorageMockRecorder struct {
	mock *MockConfigurationStorage
}

// NewMockConfigurationStorage creates a new mock instance
func NewMockConfigurationStorage(ctrl *gomock.Controller) *MockConfigurationStorage {
	mock := &MockConfigurationStorage{ctrl: ctrl}
	mock.recorder = &MockConfigurationStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigurationStorage) EXPECT() *MockConfigurationStorageMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockConfigurationStorage) Get(ctx context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockConfigurationStorageMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigurationStorage)(nil).Get), ctx)
}

// MockListStorage is a mock of ListStorage interface
type MockListStorage struct {
	ctrl     *gomock.Controller
	recorder *MockListStorageMockRecorder
}

// MockListStorageMockRecorder is the mock recorder for MockListStorage
type MockListStorageMockRecorder struct {
	mock *MockListStorage
}

// NewMockListStorage creates a new mock instance
func NewMockListStorage(ctrl *gomock.Controller) *MockListStorage {
	mock := &MockListStorage{ctrl: ctrl}
	mock.recorder = &MockListStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListStorage) EXPECT() *MockListStorageMockRecorder {
	return m.recorder
}

// AddToWhiteList mocks base method
func (m *MockListStorage) AddToWhiteList(ctx context.Context, ip storage.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWhiteList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWhiteList indicates an expected call of AddToWhiteList
func (mr *MockListStorageMockRecorder) AddToWhiteList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWhiteList", reflect.TypeOf((*MockListStorage)(nil).AddToWhiteList), ctx, ip)
}

// AddToBlackList mocks base method
func (m *MockListStorage) AddToBlackList(ctx context.Context, ip storage.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlackList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlackList indicates an expected call of AddToBlackList
func (mr *MockListStorageMockRecorder) AddToBlackList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlackList", reflect.TypeOf((*MockListStorage)(nil).AddToBlackList), ctx, ip)
}

// DeleteFromWhiteList mocks base method
func (m *MockListStorage) DeleteFromWhiteList(ctx context.Context, ip storage.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromWhiteList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromWhiteList indicates an expected call of DeleteFromWhiteList
func (mr *MockListStorageMockRecorder) DeleteFromWhiteList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromWhiteList", reflect.TypeOf((*MockListStorage)(nil).DeleteFromWhiteList), ctx, ip)
}

// DeleteFromBlackList mocks base method
func (m *MockListStorage) DeleteFromBlackList(ctx context.Context, ip storage.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromBlackList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromBlackList indicates an expected call of DeleteFromBlackList
func (mr *MockListStorageMockRecorder) DeleteFromBlackList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromBlackList", reflect.TypeOf((*MockListStorage)(nil).DeleteFromBlackList), ctx, ip)
}

// GetFromWhiteList mocks base method
func (m *MockListStorage) GetFromWhiteList(ip storage.IP) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromWhiteList", ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromWhiteList indicates an expected call of GetFromWhiteList
func (mr *MockListStorageMockRecorder) GetFromWhiteList(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromWhiteList", reflect.TypeOf((*MockListStorage)(nil).GetFromWhiteList), ip)
}

// GetFromBlackList mocks base method
func (m *MockListStorage) GetFromBlackList(ip storage.IP) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromBlackList", ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromBlackList indicates an expected call of GetFromBlackList
func (mr *MockListStorageMockRecorder) GetFromBlackList(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromBlackList", reflect.TypeOf((*MockListStorage)(nil).GetFromBlackList), ip)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntifraudServiceClient is the client API for AntifraudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntifraudServiceClient interface {
	Clean(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error)
	AddToWhiteList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error)
	AddToBlackList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error)
	DeleteFromWhiteList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error)
	DeleteFromBlackList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error)
}

type antifraudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntifraudServiceClient(cc grpc.ClientConnInterface) AntifraudServiceClient {
	return &antifraudServiceClient{cc}
}

func (c *antifraudServiceClient) Clean(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/antifraud.AntifraudService/Clean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antifraudServiceClient) AddToWhiteList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/antifraud.AntifraudService/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antifraudServiceClient) AddToBlackList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/antifraud.AntifraudService/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antifraudServiceClient) DeleteFromWhiteList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/antifraud.AntifraudService/DeleteFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antifraudServiceClient) DeleteFromBlackList(ctx context.Context, in *Arg, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/antifraud.AntifraudService/DeleteFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntifraudServiceServer is the server API for AntifraudService service.
// All implementations must embed UnimplementedAntifraudServiceServer
// for forward compatibility
type AntifraudServiceServer interface {
	Clean(context.Context, *Arg) (*Output, error)
	AddToWhiteList(context.Context, *Arg) (*Output, error)
	AddToBlackList(context.Context, *Arg) (*Output, error)
	DeleteFromWhiteList(context.Context, *Arg) (*Output, error)
	DeleteFromBlackList(context.Context, *Arg) (*Output, error)
}

// UnimplementedAntifraudServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntifraudServiceServer struct {
}

func (UnimplementedAntifraudServiceServer) Clean(context.Context, *Arg) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clean not implemented")
}
func (UnimplementedAntifraudServiceServer) AddToWhiteList(context.Context, *Arg) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedAntifraudServiceServer) AddToBlackList(context.Context, *Arg) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedAntifraudServiceServer) DeleteFromWhiteList(context.Context, *Arg) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromWhiteList not implemented")
}
func (UnimplementedAntifraudServiceServer) DeleteFromBlackList(context.Context, *Arg) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBlackList not implemented")
}
func (UnimplementedAntifraudServiceServer) mustEmbedUnimplementedAntifraudServiceServer() {}

// UnsafeAntifraudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntifraudServiceServer will
// result in compilation errors.
type UnsafeAntifraudServiceServer interface {
	mustEmbedUnimplementedAntifraudServiceServer()
}

func RegisterAntifraudServiceServer(s grpc.ServiceRegistrar, srv AntifraudServiceServer) {
	s.RegisterService(&AntifraudService_ServiceDesc, srv)
}

func _AntifraudService_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntifraudServiceServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antifraud.AntifraudService/Clean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntifraudServiceServer).Clean(ctx, req.(*Arg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntifraudService_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntifraudServiceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antifraud.AntifraudService/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntifraudServiceServer).AddToWhiteList(ctx, req.(*Arg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntifraudService_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntifraudServiceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antifraud.AntifraudService/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntifraudServiceServer).AddToBlackList(ctx, req.(*Arg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntifraudService_DeleteFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntifraudServiceServer).DeleteFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antifraud.AntifraudService/DeleteFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntifraudServiceServer).DeleteFromWhiteList(ctx, req.(*Arg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntifraudService_DeleteFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntifraudServiceServer).DeleteFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antifraud.AntifraudService/DeleteFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntifraudServiceServer).DeleteFromBlackList(ctx, req.(*Arg))
	}
	return interceptor(ctx, in, info, handler)
}

// AntifraudService_ServiceDesc is the grpc.ServiceDesc for AntifraudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntifraudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antifraud.AntifraudService",
	HandlerType: (*AntifraudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clean",
			Handler:    _AntifraudService_Clean_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _AntifraudService_AddToWhiteList_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _AntifraudService_AddToBlackList_Handler,
		},
		{
			MethodName: "DeleteFromWhiteList",
			Handler:    _AntifraudService_DeleteFromWhiteList_Handler,
		},
		{
			MethodName: "DeleteFromBlackList",
			Handler:    _AntifraudService_DeleteFromBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cli.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteForceServiceClient is the client API for AntiBruteForceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteForceServiceClient interface {
	Auth(ctx context.Context, in *Authorization, opts ...grpc.CallOption) (*Result, error)
	CleanBucket(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	AddToWhiteList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error)
	DeleteFromWhiteList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error)
	AddToBlackList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error)
	DeleteFromBlackList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error)
}

type antiBruteForceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceServiceClient(cc grpc.ClientConnInterface) AntiBruteForceServiceClient {
	return &antiBruteForceServiceClient{cc}
}

func (c *antiBruteForceServiceClient) Auth(ctx context.Context, in *Authorization, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/antiBruteForce.AntiBruteForceService/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) CleanBucket(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/antiBruteForce.AntiBruteForceService/CleanBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddToWhiteList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/antiBruteForce.AntiBruteForceService/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) DeleteFromWhiteList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/antiBruteForce.AntiBruteForceService/DeleteFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddToBlackList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/antiBruteForce.AntiBruteForceService/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) DeleteFromBlackList(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/antiBruteForce.AntiBruteForceService/DeleteFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServiceServer is the server API for AntiBruteForceService service.
// All implementations must embed UnimplementedAntiBruteForceServiceServer
// for forward compatibility
type AntiBruteForceServiceServer interface {
	Auth(context.Context, *Authorization) (*Result, error)
	CleanBucket(context.Context, *User) (*Empty, error)
	AddToWhiteList(context.Context, *Ip) (*Empty, error)
	DeleteFromWhiteList(context.Context, *Ip) (*Empty, error)
	AddToBlackList(context.Context, *Ip) (*Empty, error)
	DeleteFromBlackList(context.Context, *Ip) (*Empty, error)
	mustEmbedUnimplementedAntiBruteForceServiceServer()
}

// UnimplementedAntiBruteForceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteForceServiceServer struct {
}

func (UnimplementedAntiBruteForceServiceServer) Auth(context.Context, *Authorization) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) CleanBucket(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanBucket not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddToWhiteList(context.Context, *Ip) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) DeleteFromWhiteList(context.Context, *Ip) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddToBlackList(context.Context, *Ip) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) DeleteFromBlackList(context.Context, *Ip) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBlackList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) mustEmbedUnimplementedAntiBruteForceServiceServer() {}

// UnsafeAntiBruteForceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteForceServiceServer will
// result in compilation errors.
type UnsafeAntiBruteForceServiceServer interface {
	mustEmbedUnimplementedAntiBruteForceServiceServer()
}

func RegisterAntiBruteForceServiceServer(s grpc.ServiceRegistrar, srv AntiBruteForceServiceServer) {
	s.RegisterService(&AntiBruteForceService_ServiceDesc, srv)
}

func _AntiBruteForceService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antiBruteForce.AntiBruteForceService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).Auth(ctx, req.(*Authorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_CleanBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).CleanBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antiBruteForce.AntiBruteForceService/CleanBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).CleanBucket(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antiBruteForce.AntiBruteForceService/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddToWhiteList(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_DeleteFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).DeleteFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antiBruteForce.AntiBruteForceService/DeleteFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).DeleteFromWhiteList(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antiBruteForce.AntiBruteForceService/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddToBlackList(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_DeleteFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).DeleteFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antiBruteForce.AntiBruteForceService/DeleteFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).DeleteFromBlackList(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteForceService_ServiceDesc is the grpc.ServiceDesc for AntiBruteForceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteForceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antiBruteForce.AntiBruteForceService",
	HandlerType: (*AntiBruteForceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AntiBruteForceService_Auth_Handler,
		},
		{
			MethodName: "CleanBucket",
			Handler:    _AntiBruteForceService_CleanBucket_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _AntiBruteForceService_AddToWhiteList_Handler,
		},
		{
			MethodName: "DeleteFromWhiteList",
			Handler:    _AntiBruteForceService_DeleteFromWhiteList_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _AntiBruteForceService_AddToBlackList_Handler,
		},
		{
			MethodName: "DeleteFromBlackList",
			Handler:    _AntiBruteForceService_DeleteFromBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/AntiBruteforceService.proto",
}
